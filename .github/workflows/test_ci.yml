# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions
name: Test for Continuous integration
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main", "dev" ]
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
        node-version: ['18.x']
        mongodb-version: ['5.0']
    steps:
    - name: Exit because unit tests are not implemented in TypeScript for now
      run: exit 1
    - name: Start MongoDB  
      run: sudo docker run --name mongodb -d -p 27017:27017 mongo:${{ matrix.mongodb-version }}
    - uses: actions/checkout@v3
      with:
        submodules: true
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    - name: Install Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
    - id: submodule-local
      name: Save local version of submodule
      run: echo "ver=`cd sampleGenerator && git log --pretty="%h" -1 && cd ..`" >> $GITHUB_OUTPUT
    - id: submodule-origin
      name: Save origin version of submodule
      run: echo "ver=`cd sampleGenerator && git log origin --pretty="%h" -1 && cd ..`" >> $GITHUB_OUTPUT
    - name: Check submodule version
      if: ${{ steps.submodule-local.outputs.ver != steps.submodule-origin.outputs.ver }}
      uses: actions/github-script@v3
      with:
        script: |
            core.setFailed('Please update submodule to the latest version by using \"git submodule update --remote\"')
    - name: Install sampleGenerator dependencies from package-lock.json
      run: cd sampleGenerator && pnpm i --force --frozen-lockfile && cd ..
    - name: Install taxi-back dependencies from package-lock.json
      run: pnpm i --force --frozen-lockfile
    - name: Run unit tests
      run: pnpm run test
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }} 
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        DB_PATH: ${{ secrets.DB_PATH }}
        PORT: ${{ secrets.PORT }}
        SESSION_KEY: ${{ secrets.SESSION_KEY }}
